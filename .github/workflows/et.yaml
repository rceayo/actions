name: Diy EasyTier Mobile IOS ipa CI

on:
  workflow_dispatch:
      
env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:

  build:
    name: Build iPhone ios ipa simulator
    # 环境
    runs-on: macos-latest
    steps:
      # Checkout 当前分支进行处理
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Clone the repository
        run: |
          git clone https://github.com/EasyTier/EasyTier
          cd EasyTier
          git checkout v2.2.2
      
      - uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup protoc
        uses: arduino/setup-protoc@v2
        with:
          # GitHub repo token to use to avoid rate limiter
          repo-token: ${{ secrets.GIT_TOKEN }}

      # - name: Setup pnpm cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: |
          pwd
          ls
          cd EasyTier/easytier-gui
          pnpm -r install
          echo "\n\npnpm -r install succ"
          pnpm -r build
          echo "\n\npnpm -r build succ"

      # - name: Cargo cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cargo
      #       ./target
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust target
        run: |
          # curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup.sh
          sh rustup.sh -y
          # bash ./.github/workflows/install_rust.sh
          echo "\n\nInstall rust succ"
          rustup target list
          rustup target add aarch64-apple-ios
          rustup target add aarch64-apple-ios-sim

          # rustup target add aarch64-linux-android
          # rustup target add armv7-linux-androideabi
          # rustup target add i686-linux-android
          # rustup target add x86_64-linux-android
      
      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          # cat ca.p12 | base64
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          # cat mp.mobileprovision | base64
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM }}
        run: |
          # Create Environmental variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # Import Certificate and Provisioning Profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # Create Temporary Keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # Import Certificate to Keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles  
      
      - name: Build IOS p12
        run: |
          pwd
          ls
          cd EasyTier/easytier-gui
          # cd easytier-gui
          pnpm tauri info
          echo "\n\nview cert"
          pnpm tauri ios init
          echo "\n\npnpm tauri ios init succ"
          brew install protobuf
          echo "\n\nbrew install protobuf succ"

          pnpm tauri ios build
          echo "\n\npnpm tauri ios build succ"
          ls -R ../ | grep -v 'node_modules|.vscode'
          ls -R . | grep -v 'node_modules|.vscode'
      
      # - name: Build IOS DEV
      #   run: |
      #     pwd
      #     ls
      #     cd EasyTier/easytier-gui
      #     # cd easytier-gui
      #     pnpm tauri ios init
      #     echo "\n\npnpm tauri ios init succ"
      #     brew install protobuf
      #     echo "\n\nbrew install protobuf succ"
      #     # # 执行交互式命令方法1，45为打印的 [45] iPhone 15 Pro
      #     # echo -e '45' | pnpm tauri ios dev
      #     # # 执行交互式命令方法2
      #     # sh ~/.github/workflows/tools/et_pnpm_ios_dev.sh
      #     # ls -R . | grep -v 'node_modules|.vscode'
      #     cat src-tauri/tauri.conf.json
      #     # 在8行后面新插入两行行
      #     sed '9i\
      #         "iOS": { "developmentTeam": "v"},
      #         ' src-tauri/tauri.conf.json
      #     cat src-tauri/tauri.conf.json
      #     pnpm tauri ios build
      #     echo "\n\npnpm tauri ios build succ"
      #     ls -R ../ | grep -v 'node_modules|.vscode'
      #     ls -R . | grep -v 'node_modules|.vscode'


      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: easytier-gui-ipa
          path: |
            # EasyTier/*
            EasyTier/*/*.ipa
            # EasyTier/easytier-gui/src-tauri/gen/apple/build/arm64/*.ipa
