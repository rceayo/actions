# This is a basic workflow to help you get started with Actions

name: Diy APatch APK CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
    # branches: [ "main" ]
    # paths:
      # - '.github/workflows/APatch.yml'
  # pull_request:
    # branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out source code
        uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Clone the repository
        run: |
          git clone https://github.com/bmax121/APatch
      
      - name: Generate version
        id: parse_version
        run: |
          COMMIT_NUM=$(git rev-list --count HEAD)
          VERSION=$(echo "$COMMIT_NUM + 200 + 10000" | bc)
          echo "Generated Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d
          add-to-path: true
          local-cache: true
      
      - name: Install toolchain
        run: |
          rustup default stable
          cargo install cargo-ndk
          rustup target install aarch64-linux-android

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: apd
          cache-targets: false
      
      # - name: Build with Gradle
      #   run: cd APatch && chmod +x ./gradlew && ./gradlew shadowJar
      - name: Build with Gradle
        run: |
          cd APatch && chmod +x ./gradlew
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties
          ./gradlew clean assembleRelease
          ls -R .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: APatch
          # path: app/build/outputs/apk/release
          path: app/build/outputs/apk/debug

      # - name: Sign Release
      #   env: 
      #     SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      #   if: ${{ env.SIGNING_KEY != '' }}
      #   continue-on-error: true
      #   uses: kevin-david/zipalign-sign-android-release@v1.1
      #   id: sign_app
      #   with:
      #     releaseDirectory: app/build/outputs/apk/release
      #     signingKeyBase64: ${{ secrets.SIGNING_KEY }}
      #     alias: ${{ secrets.ALIAS }}
      #     keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
      #     keyPassword: ${{ secrets.KEY_PASSWORD }}

      # - name: Upload build artifact
      #   env: 
      #      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      #   if: ${{ env.SIGNING_KEY != '' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: APatch
      #     path: ${{steps.sign_app.outputs.signedReleaseFile}}
      
      # - name: Post to channel
      #   if: ${{github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && github.ref_type != 'tag'}}
      #   env:
      #     BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      #     COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      #     COMMIT_URL: ${{ github.event.head_commit.url }}
      #     COMMIT_ID: ${{ github.event.head_commit.id }}
      #   run: |
      #     if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
      #       OUTPUT="app/build/outputs/apk/release"
      #       export Release=$(find $OUTPUT -name "*.apk")
      #       URL=$(python3 .github/scripts/telegram_url.py -1002058433411)
      #       curl -v "$URL" -F Release=@${{ steps.sign_app.outputs.signedReleaseFile }}
      #       URL=$(python3 .github/scripts/telegram_url.py -1001910818234)
      #       curl -v "$URL" -F Release=@${{ steps.sign_app.outputs.signedReleaseFile }}
      #     fi
      
      # - name: Release apk
      #   env: 
      #     SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      #   if: ${{ env.SIGNING_KEY != '' && github.ref_type == 'tag' }}
      #   continue-on-error: true
      #   uses: ncipollo/release-action@v1
      #   with:
      #     token: ${{ github.token }}
      #     tag: ${{ steps.parse_version.outputs.VERSION }}
      #     artifacts: ${{steps.sign_app.outputs.signedReleaseFile}}
      #     generateReleaseNotes: true
      #     makeLatest: true
      #     replacesArtifacts: true
